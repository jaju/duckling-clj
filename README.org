* Duckling?

A Clojure library originally created by [[https://wit.ai/][Wit.ai]] for identifying semantic content in text - like time, measurements, currencies and similar.

*Wit.ai* decided to abandon the Clojure version in favour of a [[https://github.com/facebook/duckling][Haskell version]].

* Details

[[https://clojars.org/org.msync/duckling][file:https://clojars.org/org.msync/duckling/latest-version.svg]]

/org.msync/duckling-clj/ is a Clojure library that parses text into structured data:

#+begin_src clojure
  (parse "the first Tuesday of October")
  ; =>
  {:value "2014-10-07T00:00:00.000-07:00"
   :grain :day}
#+end_src

For the time the hosted Clojure version by *wit.ai* exists, you can try it out at https://duckling.wit.ai

The original blog post announcement can be found at [[https://wit.ai/blog/2014/10/01/open-source-parser-duckling][https://wit.ai/blog/2014/10/01/open-source-parser-duckling]] for more context.

** Getting started

To use Duckling in your project, you just need two functions: `load!` to load the default configuration, and `parse` to
parse a string.

#+begin_src clojure
  (ns myproject.core
    (:require [duckling.core :as p]))

  (p/load!) ;; Load all languages

  (p/parse :en$core ;; core configuration for English ; see also :fr$core, :es$core, :zh$core
           "wake me up the last Monday of January 2015 at 6am"
           [:time]) ;; We are interested in :time expressions only ; see also :duration, :temperature, etc.

  ;; => [{:label :time
  ;;        :start 15
  ;;        :end 49
  ;;        :value {:type "value", :value "2015-01-26T06:00:00.000-02:00", :grain :hour}
  ;;        :body "last Monday of January 2015 at 6am"}]
#+end_src

See the old hosted documentation at [[https://duckling.wit.ai][https://duckling.wit.ai]] for more information.

* Details
** Looking around
There are multiple languages supported. For reference, the current list looks like below
#+begin_src clojure :results output code :exports both
  ; In the duckling.core namespace
(available-languages)
#+end_src

#+RESULTS:
#+begin_src clojure
#{"nl"
  "pt"
  "en"
  "zh"
  "ro"
  "tr"
  "it"
  "vi"
  "id"
  "uk"
  "pl"
  "my"
  "sv"
  "hr"
  "fr"
  "da"
  "de"
  "nb"
  "ru"
  "ga"
  "es"
  "ja"
  "et"
  "ar"
  "ko"
  "he"}

#+end_src

Before you can use duckling, you will need to load the relevant languages' corpuses - datasets that contain examples and rules from which duckling learns how to generalize.
For example, to load English data, run the following

#+begin_src clojure :results output code :exports both
  (load! ["en"])
#+end_src

#+RESULTS:
#+begin_src clojure
{:en$core
 (:phone-number
  :number
  :distance
  :volume
  :time
  :temperature
  :url
  :email
  :timezone
  :leven-unit
  :leven-product
  :unit
  :quantity
  :amount-of-money
  :ordinal
  :unit-of-duration
  :cycle
  :duration)}

#+end_src

As you may already notice, there is support for identifying structured information on time, money, phone-numbers, temperature et al.
The above loaded English language data, now available with the key /:en$core/.

#+begin_src clojure :results output code :exports both
  (parse :en$core "Meet me at 8")
#+end_src

#+RESULTS:
#+begin_src clojure
({:dim :number,
  :body "8",
  :value {:type "value", :value 8},
  :start 11,
  :end 12}
 {:dim :distance,
  :body "8",
  :value {:type "value", :value 8},
  :start 11,
  :end 12,
  :latent true}
 {:dim :volume,
  :body "8",
  :value {:type "value", :value 8},
  :start 11,
  :end 12,
  :latent true}
 {:dim :temperature,
  :body "8",
  :value {:type "value", :value 8},
  :start 11,
  :end 12,
  :latent true}
 {:dim :time,
  :body "at 8",
  :value
  {:type "value",
   :value "2021-04-17T08:00:00.000+05:30",
   :grain :hour,
   :values
   ({:type "value",
     :value "2021-04-17T08:00:00.000+05:30",
     :grain :hour}
    {:type "value",
     :value "2021-04-17T20:00:00.000+05:30",
     :grain :hour}
    {:type "value",
     :value "2021-04-18T08:00:00.000+05:30",
     :grain :hour})},
  :start 8,
  :end 12})

#+end_src

